{
  "active": true,
  "connections": {
    "Telegram Trigger": {
      "main": [
        [
          {
            "node": "Client",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Client": {
      "main": [
        [
          {
            "node": "Wordpress Client",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Wordpress Client": {
      "main": [
        [
          {
            "node": "Config",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Config": {
      "main": [
        [
          {
            "node": "If not /start",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Simple Memory": {
      "ai_memory": [
        [
          {
            "node": "Copywriter",
            "type": "ai_memory",
            "index": 0
          }
        ]
      ]
    },
    "Action Typing": {
      "main": [
        [
          {
            "node": "Copywriter",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "If not /start": {
      "main": [
        [
          {
            "node": "Action Typing",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Send Welcome Message",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "OpenAI Chat Model2": {
      "ai_languageModel": [
        [
          {
            "node": "Copywriter",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "SubWorkflow": {
      "main": [
        [
          {
            "node": "Get or Generate SEO Strategy Document",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Switch": {
      "main": [
        [
          {
            "node": "Post Idea Agent",
            "type": "main",
            "index": 0
          }
        ],
        []
      ]
    },
    "Structured Output Parser": {
      "ai_outputParser": [
        [
          {
            "node": "Auto-fixing Output Parser",
            "type": "ai_outputParser",
            "index": 0
          }
        ]
      ]
    },
    "OpenAI Chat Model": {
      "ai_languageModel": [
        [
          {
            "node": "Basic LLM Chain",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Idea Agent Tool": {
      "ai_tool": [
        [
          {
            "node": "Copywriter",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Params": {
      "main": [
        [
          {
            "node": "Switch",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get Document": {
      "main": [
        [
          {
            "node": "Params",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Copywriter": {
      "main": [
        [
          {
            "node": "Reply to user",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Pinecone Vector Store": {
      "ai_tool": [
        [
          {
            "node": "Copywriter",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Embeddings OpenAI": {
      "ai_embedding": [
        [
          {
            "node": "Pinecone Vector Store",
            "type": "ai_embedding",
            "index": 0
          }
        ]
      ]
    },
    "SerpAPI": {
      "ai_tool": [
        []
      ]
    },
    "Get or Generate SEO Strategy Document": {
      "main": [
        [
          {
            "node": "If already generating",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Create Blog Post Tool": {
      "ai_tool": [
        [
          {
            "node": "Copywriter",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "If already generating": {
      "main": [
        [],
        [
          {
            "node": "Get Document",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Auto-fixing Output Parser": {
      "ai_outputParser": [
        [
          {
            "node": "Basic LLM Chain",
            "type": "ai_outputParser",
            "index": 0
          }
        ]
      ]
    },
    "OpenAI Chat Model3": {
      "ai_languageModel": [
        [
          {
            "node": "Auto-fixing Output Parser",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Post Idea Agent": {
      "main": [
        [
          {
            "node": "Basic LLM Chain",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "OpenAI Chat Model4": {
      "ai_languageModel": [
        [
          {
            "node": "Post Idea Agent",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Simple Memory2": {
      "ai_memory": [
        [
          {
            "node": "Post Idea Agent",
            "type": "ai_memory",
            "index": 0
          }
        ]
      ]
    }
  },
  "createdAt": "2025-03-25T06:36:25.606Z",
  "id": "nbZid86Ue8z6s5HW",
  "meta": {
    "templateCredsSetupCompleted": true
  },
  "name": "Content Creator Agent",
  "nodes": [
    {
      "parameters": {
        "updates": [
          "message"
        ],
        "additionalFields": {
          "download": false
        }
      },
      "type": "n8n-nodes-base.telegramTrigger",
      "typeVersion": 1.1,
      "position": [
        -1360,
        280
      ],
      "id": "233140ef-c23a-4218-ab01-716d106d45d2",
      "name": "Telegram Trigger",
      "webhookId": "78f5a17f-0062-4575-aa88-b474e61833d4",
      "credentials": {
        "telegramApi": {
          "id": "EHNvbxKETcV3t5MW",
          "name": "Telegram account"
        }
      }
    },
    {
      "parameters": {
        "operation": "search",
        "base": {
          "__rl": true,
          "value": "app3foHr3iDjZBLvs",
          "mode": "list",
          "cachedResultName": "Engineering Prototype Builder",
          "cachedResultUrl": "https://airtable.com/app3foHr3iDjZBLvs"
        },
        "table": {
          "__rl": true,
          "value": "tblfU3UiMHDL5DnNu",
          "mode": "list",
          "cachedResultName": "Clients",
          "cachedResultUrl": "https://airtable.com/app3foHr3iDjZBLvs/tblfU3UiMHDL5DnNu"
        },
        "filterByFormula": "=AND({Messaging App}=\"Telegram\", {Messaging App User}=\"@{{ $('Telegram Trigger').item.json.message.from.username }}\")",
        "returnAll": false,
        "limit": 1,
        "options": {}
      },
      "type": "n8n-nodes-base.airtable",
      "typeVersion": 2.1,
      "position": [
        -1100,
        280
      ],
      "id": "94f52344-4037-4e6d-bad9-e40572a95d31",
      "name": "Client",
      "credentials": {
        "airtableTokenApi": {
          "id": "f9JH5DCFMvod79bz",
          "name": "Airtable Personal Access Token account"
        }
      }
    },
    {
      "parameters": {
        "base": {
          "__rl": true,
          "value": "app3foHr3iDjZBLvs",
          "mode": "list",
          "cachedResultName": "Engineering Prototype Builder",
          "cachedResultUrl": "https://airtable.com/app3foHr3iDjZBLvs"
        },
        "table": {
          "__rl": true,
          "value": "tblty7DapzrDJ6cV6",
          "mode": "list",
          "cachedResultName": "Wordpress Clients",
          "cachedResultUrl": "https://airtable.com/app3foHr3iDjZBLvs/tblty7DapzrDJ6cV6"
        },
        "id": "={{ $json['Wordpress Clients'][0] }}",
        "options": {}
      },
      "type": "n8n-nodes-base.airtable",
      "typeVersion": 2.1,
      "position": [
        -1100,
        520
      ],
      "id": "571f9556-b162-4d34-bf4e-dc5b81b3a2d5",
      "name": "Wordpress Client",
      "credentials": {
        "airtableTokenApi": {
          "id": "f9JH5DCFMvod79bz",
          "name": "Airtable Personal Access Token account"
        }
      }
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "635b6aa3-4766-4b29-b318-e23d2a96ccfc",
              "name": "id",
              "value": "={{ $('Telegram Trigger').item.json.message.chat.id }}",
              "type": "string"
            },
            {
              "id": "259c6506-e038-4729-ae4b-37a73281a7c4",
              "name": "Name",
              "value": "={{ $('Client').item.json.Name }}",
              "type": "string"
            },
            {
              "id": "1da58776-5c25-41d4-9294-a6d985ea1c9d",
              "name": "urlEncoded",
              "value": "={{ $json.URL.base64Encode() }}",
              "type": "string"
            },
            {
              "id": "8c863289-b1dd-4122-ac06-d825aa1d8581",
              "name": "telegramChatId",
              "value": "={{ $('Telegram Trigger').item.json.message.chat.id }}",
              "type": "string"
            },
            {
              "id": "8c75bb0f-c975-41a5-ba35-b293624d865b",
              "name": "message",
              "value": "={{ $('Telegram Trigger').item.json.message.text }}",
              "type": "string"
            },
            {
              "id": "1d00fb9b-7478-45a6-90b2-9b7056f7d6dc",
              "name": "wordpressUsername",
              "value": "={{ $json[\"Wordpress Username\"] }}",
              "type": "string"
            },
            {
              "id": "2faa367f-ce60-4235-a8ee-06ef72a52303",
              "name": "wordpressPassword",
              "value": "={{ $json[\"Wordpress Password\"] }}",
              "type": "string"
            },
            {
              "id": "96145c8b-5eb2-4baa-b018-7f26dda1ce1c",
              "name": "wordpressUrl",
              "value": "={{ $json.URL }}",
              "type": "string"
            },
            {
              "id": "f9aadfa4-4037-45b5-8888-ae2d897bfd35",
              "name": "wordpressClientId",
              "value": "={{ $json.id }}",
              "type": "string"
            },
            {
              "id": "642e5844-f04f-4214-b6c1-f3e9e22208ba",
              "name": "wordpressClientIdentifier",
              "value": "={{ $json.Identifier }}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        -860,
        520
      ],
      "id": "019b43a7-cadb-447f-abf3-ed17250b9a7b",
      "name": "Config"
    },
    {
      "parameters": {
        "sessionIdType": "customKey",
        "sessionKey": "=copywriter2-{{ $('Config').item.json.id }}"
      },
      "type": "@n8n/n8n-nodes-langchain.memoryBufferWindow",
      "typeVersion": 1.3,
      "position": [
        120,
        620
      ],
      "id": "921943ba-0d88-48ad-aae7-45ce02518194",
      "name": "Simple Memory"
    },
    {
      "parameters": {
        "operation": "sendChatAction",
        "chatId": "={{ $json.telegramChatId }}"
      },
      "type": "n8n-nodes-base.telegram",
      "typeVersion": 1.2,
      "position": [
        -400,
        380
      ],
      "id": "ad4aba58-5341-4139-ba01-85910e1e3143",
      "name": "Action Typing",
      "webhookId": "bac8b6dd-e07b-499e-99bc-e33e1bbf1246",
      "credentials": {
        "telegramApi": {
          "id": "EHNvbxKETcV3t5MW",
          "name": "Telegram account"
        }
      }
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "abe3be92-7f5e-4f9d-8116-0bf639975b96",
              "leftValue": "={{ $('Telegram Trigger').item.json.message.text }}",
              "rightValue": "/start",
              "operator": {
                "type": "string",
                "operation": "notEquals"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        -660,
        520
      ],
      "id": "9d0a6634-b59d-4d2e-9db1-8d3d957532e9",
      "name": "If not /start"
    },
    {
      "parameters": {
        "model": {
          "__rl": true,
          "value": "gpt-4o",
          "mode": "list",
          "cachedResultName": "gpt-4o"
        },
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
      "typeVersion": 1.2,
      "position": [
        -40,
        620
      ],
      "id": "731c17ed-6aca-4c9e-8788-02667946a1ae",
      "name": "OpenAI Chat Model2",
      "credentials": {
        "openAiApi": {
          "id": "I92UkH9mThS7D4I6",
          "name": "CodPal Account"
        }
      }
    },
    {
      "parameters": {
        "content": "# Coordinator Agent System Prompt\n\nYou are a coordinator agent with access to three specialized tools:\n\n## Tools Overview\n\n### 1. idea_agent\n- **Function:** Creates a post idea using an SEO Content Strategy document.\n- **Capabilities:**\n  - Remembers past interactions.\n  - Can generate alternative ideas based on user feedback.\n- **Usage:** Always seek user approval for any generated idea before proceeding. If the user rejects the idea, capture their feedback and pass it along to the idea_agent to generate a revised idea.\n\n### 2. blog_post_agent\n- **Function:** Manages posts on the user's WordPress site.\n- **Capabilities:**\n  - **Create:** Generates a draft post based on a provided idea.\n  - **Update:** Updates an existing post when provided with the post identifier and the required changes.\n  - **List:** Retrieves a list of all posts.\n- **Usage:** Where reasonable, return the post URL to the user for review.\n\n## Responsibilities & Workflow\n\n### Assess User Intent\n- Determine whether the user’s request is for:\n  - An SEO content strategy.\n  - A post idea.\n  - A blog post creation, update, or listing.\n\n### Coordination of Tool Usage\n- **Step 1:** Retrieve the latest SEO content strategy by calling the **seo_content_strategy_agent**.\n- **Step 2:** Use the retrieved strategy as input for the **idea_agent** to generate a post idea.\n  - **Important:** Always request explicit user approval for the generated idea.\n  - If the user rejects the idea, incorporate their feedback and request an alternative idea from the **idea_agent**.\n- **Step 3:** Once an approved idea is obtained:\n  - **For creation:** Call the **blog_post_agent** to create a draft post on the user's WordPress site and send the post URL to the user for review.\n  - **For updates:** Call the **blog_post_agent** with the specific post identifier and the modifications required.\n  - **For listing:** Use **blog_post_agent** to retrieve and display all posts.\n\n### Data Flow & Validation\n- Always ensure the SEO content strategy is current by calling **seo_content_strategy_agent**.\n- Confirm that any generated idea is clearly based on the strategy data.\n- Validate user instructions for post updates before proceeding with **blog_post_agent**.\n\n### Communication & Iteration\n- Clearly inform the user of the current stage in the process.\n- Obtain explicit user approval for any post idea before moving forward.\n- Iteratively refine ideas by capturing user feedback and passing it to **idea_agent** if necessary.\n- Provide clear instructions or requests for additional details when handling post updates via **blog_post_agent**.\n\n---\n\nYour goal is to seamlessly coordinate these tools to fulfill the user's requests efficiently and accurately, ensuring that each output is data-driven and aligned with the overall SEO strategy while maintaining clear user communication and approval at each stage.",
        "height": 1400,
        "width": 1300,
        "color": 4
      },
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        1640,
        -200
      ],
      "typeVersion": 1,
      "id": "d1069d76-0a24-43b1-9e82-8abc4feb7751",
      "name": "Sticky Note12"
    },
    {
      "parameters": {
        "workflowInputs": {
          "values": [
            {
              "name": "route"
            },
            {
              "name": "query"
            },
            {
              "name": "seoContentStrategy"
            },
            {
              "name": "config",
              "type": "object"
            }
          ]
        }
      },
      "type": "n8n-nodes-base.executeWorkflowTrigger",
      "typeVersion": 1.1,
      "position": [
        -1060,
        1940
      ],
      "id": "e3c2c4a7-f84c-4ff5-9817-3059cf4f6aaf",
      "name": "SubWorkflow"
    },
    {
      "parameters": {
        "rules": {
          "values": [
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "leftValue": "={{ $('SubWorkflow').item.json.route }}",
                    "rightValue": "idea_agent",
                    "operator": {
                      "type": "string",
                      "operation": "equals"
                    },
                    "id": "86cd6a8f-1c7f-470a-b7ec-e021339a3952"
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "Idea Agent"
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "id": "088b63ae-cb93-4e40-a19a-8d40da3eca5a",
                    "leftValue": "={{ $('SubWorkflow').item.json.route }}",
                    "rightValue": "create_blog_post",
                    "operator": {
                      "type": "string",
                      "operation": "equals",
                      "name": "filter.operator.equals"
                    }
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "Create Blog Post"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.switch",
      "typeVersion": 3.2,
      "position": [
        180,
        1960
      ],
      "id": "3cc625ef-b9b4-4fe8-be8d-2d0268a558fa",
      "name": "Switch"
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "={{ $json.query }}\n\nSEO Content Strategy: {{ $json.seoContentStrategy }}",
        "hasOutputParser": true,
        "options": {
          "systemMessage": "You are an ideas agent specialized in generating post ideas based on an SEO Content Strategy document provided by the user. Follow these instructions:\n\t1.\tInput Processing:\n\t•\tRead and analyze the SEO Content Strategy document provided by the user.\n\t•\tIdentify key topics, trends, keywords, and any data insights that can inform a new post idea.\n\t2.\tIdea Generation:\n\t•\tDevelop a creative and data-driven post idea that aligns with the strategy.\n\t•\tEnsure that the idea is innovative, relevant, and actionable.\n\t3.\tOutput Requirements:\n\t•\tProduce the final output in JSON format.summarizing the idea.\n\t•\tEnsure both the title and description clearly reflect the insights derived from the provided SEO content strategy.\n\t4.\tConstraints:\n\t•\tDo not exceed the 100-character limit for the description.\n\t•\tGround your idea entirely on the data and insights from the SEO Content Strategy document.\n\t•\tMaintain clarity and brevity in both the title and the description.\n\nYour goal is to produce a JSON output that provides a clear, data-driven idea for a new post, adhering strictly to the formatting and length constraints specified.\n\nRespond only with:\n{\n\"title\": \"A concise, engaging title for the post idea.\",\n\"description\": \"A short description (maximum 100 characters) \"\n}"
        }
      },
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 1.8,
      "position": [
        820,
        1680
      ],
      "id": "86902b53-6fe9-4079-9bc2-a45421f81ce4",
      "name": "Post Idea Agent"
    },
    {
      "parameters": {
        "schemaType": "manual",
        "inputSchema": "{\n\t\"type\": \"object\",\n\t\"properties\": {\n\t\t\"title\": {\n\t\t\t\"type\": \"string\"\n\t\t},\n\t\t\"description\": {\n\t\t\t\"type\": \"string\"\n\t\t}\n\t}\n}"
      },
      "type": "@n8n/n8n-nodes-langchain.outputParserStructured",
      "typeVersion": 1.2,
      "position": [
        1460,
        2100
      ],
      "id": "9ba51da1-b791-4004-abeb-d46e6a9556f6",
      "name": "Structured Output Parser"
    },
    {
      "parameters": {
        "model": {
          "__rl": true,
          "mode": "list",
          "value": "gpt-4o-mini"
        },
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
      "typeVersion": 1.2,
      "position": [
        1140,
        1920
      ],
      "id": "5395519c-69ec-4489-8cbf-e6d5a151b296",
      "name": "OpenAI Chat Model",
      "credentials": {
        "openAiApi": {
          "id": "I92UkH9mThS7D4I6",
          "name": "CodPal Account"
        }
      }
    },
    {
      "parameters": {
        "name": "idea_agent",
        "description": "Generates an idea for a post using an SEO Content Strategy document. The agent has memory, so you can request new ideas if the user is not satisfied. The agent has access to the latest seoContentStrategy, you do not need to send it.",
        "workflowId": {
          "__rl": true,
          "value": "nbZid86Ue8z6s5HW",
          "mode": "list",
          "cachedResultName": "Content Creator Agent"
        },
        "workflowInputs": {
          "mappingMode": "defineBelow",
          "value": {
            "route": "idea_agent",
            "query": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('query', `Send a message to the agent asking them to generate an idea..`, 'string') }}",
            "config": "={{ $('Config').item.json }}"
          },
          "matchingColumns": [
            "route"
          ],
          "schema": [
            {
              "id": "route",
              "displayName": "route",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "canBeUsedToMatch": true,
              "type": "string",
              "removed": false
            },
            {
              "id": "query",
              "displayName": "query",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "canBeUsedToMatch": true,
              "type": "string",
              "removed": false
            },
            {
              "id": "seoContentStrategy",
              "displayName": "seoContentStrategy",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "canBeUsedToMatch": true,
              "type": "string",
              "removed": true
            },
            {
              "id": "config",
              "displayName": "config",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "canBeUsedToMatch": true,
              "type": "object",
              "removed": false
            }
          ],
          "attemptToConvertTypes": false,
          "convertFieldsToString": false
        }
      },
      "type": "@n8n/n8n-nodes-langchain.toolWorkflow",
      "typeVersion": 2.1,
      "position": [
        260,
        620
      ],
      "id": "c7403771-0b95-446d-aa41-a4268c038e13",
      "name": "Idea Agent Tool"
    },
    {
      "parameters": {
        "chatId": "={{ $('Config').item.json.telegramChatId }}",
        "text": "={{ $json.output }}",
        "additionalFields": {
          "appendAttribution": false
        }
      },
      "type": "n8n-nodes-base.telegram",
      "typeVersion": 1.2,
      "position": [
        740,
        380
      ],
      "id": "878c1e5f-a1ce-4a27-ae61-26bec570781a",
      "name": "Reply to user",
      "webhookId": "077e413c-2611-45e3-842f-0c76932ac034",
      "credentials": {
        "telegramApi": {
          "id": "EHNvbxKETcV3t5MW",
          "name": "Telegram account"
        }
      }
    },
    {
      "parameters": {
        "mode": "runOnceForEachItem",
        "jsCode": "const root = $(\"SubWorkflow\").item.json;\nreturn {\n  ...root.config,\n  query: root.query,\n  seoContentStrategy: $input.item.json.fileContent\n}"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -80,
        1960
      ],
      "id": "017049e8-7b34-480d-82ee-aaef97cd0f86",
      "name": "Params"
    },
    {
      "parameters": {
        "content": "## Blog Post Agent System Prompt\n",
        "height": 280,
        "width": 440,
        "color": 4
      },
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        1640,
        1240
      ],
      "id": "13e90e75-ac17-4fc4-88d2-23d7d269b334",
      "name": "Sticky Note"
    },
    {
      "parameters": {
        "workflowId": {
          "__rl": true,
          "value": "LJeRjkaNnZAhxS0W",
          "mode": "list",
          "cachedResultName": "Get Latest SEO Content Strategy"
        },
        "workflowInputs": {
          "mappingMode": "defineBelow",
          "value": {
            "wordpressClientId": "={{ $('SubWorkflow').item.json.config.wordpressClientId }}",
            "documentType": "SeoContentStrategy"
          },
          "matchingColumns": [
            "wordpressClientIdentifier"
          ],
          "schema": [
            {
              "id": "wordpressClientId",
              "displayName": "wordpressClientId",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "canBeUsedToMatch": true,
              "type": "string",
              "removed": false
            },
            {
              "id": "documentType",
              "displayName": "documentType",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "canBeUsedToMatch": true,
              "type": "string",
              "removed": false
            }
          ],
          "attemptToConvertTypes": false,
          "convertFieldsToString": true
        },
        "options": {}
      },
      "type": "n8n-nodes-base.executeWorkflow",
      "typeVersion": 1.2,
      "position": [
        -300,
        1960
      ],
      "id": "4940a8ca-fbc9-4c54-9138-01d0739cd51d",
      "name": "Get Document"
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "={{ $('Config').item.json.message }}",
        "options": {
          "systemMessage": "=You are an expert SEO copywriter with access to powerful content creation tools:\n- idea_agent for SEO-driven blog post ideas\n- create_blog_post for content generation\n- website_knowledge_base for grounded research\n\nYou are unable to schedule work for later. If there are any problems with your tools, ask the user to try again later.\nIf you get an error ALREADY_GENERATING from a tool, inform the user that you are already working and they need to ask again when you are done.\n\nCurrent Date: {{ $now.format('yyyy-MM-dd HH:mm') }}\n\nCRITICAL INSTRUCTION: \n1. For new blog posts, ALWAYS:\n   - Generate idea using idea_agent\n   - Get user APPROVAL before creating post\n   - Use create_blog_post only after user confirms\n2. Use website_knowledge_base for ALL user questions to ensure answer accuracy\n3. If idea is rejected, generate new ideas until user approves"
        }
      },
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 1.8,
      "position": [
        180,
        380
      ],
      "id": "4b0ba40d-a5eb-4a23-ba9e-6eb625723aaa",
      "name": "Copywriter"
    },
    {
      "parameters": {
        "mode": "retrieve-as-tool",
        "toolName": "website_knowledge_base",
        "toolDescription": "Semantic search on all website data. Use this search tool to answer questions grounded to the user's website data.",
        "pineconeIndex": {
          "__rl": true,
          "value": "wordpress-blogs",
          "mode": "list",
          "cachedResultName": "wordpress-blogs"
        },
        "options": {
          "pineconeNamespace": "=wordpress-{{ $('Config').item.json.urlEncoded }}"
        }
      },
      "type": "@n8n/n8n-nodes-langchain.vectorStorePinecone",
      "typeVersion": 1,
      "position": [
        560,
        620
      ],
      "id": "6a12c21d-c25e-434c-bb32-7c4ef8dbf968",
      "name": "Pinecone Vector Store",
      "credentials": {
        "pineconeApi": {
          "id": "aM3CTptjeioEW1ye",
          "name": "PineconeApi account"
        }
      }
    },
    {
      "parameters": {
        "options": {
          "dimensions": 1536
        }
      },
      "type": "@n8n/n8n-nodes-langchain.embeddingsOpenAi",
      "typeVersion": 1.2,
      "position": [
        580,
        760
      ],
      "id": "8b039e88-f436-4383-bb03-bee0afc7a2f0",
      "name": "Embeddings OpenAI",
      "credentials": {
        "openAiApi": {
          "id": "I92UkH9mThS7D4I6",
          "name": "CodPal Account"
        }
      }
    },
    {
      "parameters": {
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.toolSerpApi",
      "typeVersion": 1,
      "position": [
        920,
        760
      ],
      "id": "7a9573eb-292e-4f34-be7c-7781d1ac7d3c",
      "name": "SerpAPI",
      "credentials": {
        "serpApi": {
          "id": "QEy6ziLBcTJrXptF",
          "name": "SerpAPI account"
        }
      }
    },
    {
      "parameters": {
        "workflowId": {
          "__rl": true,
          "value": "bh0ZlfpPSQlAPRhl",
          "mode": "list",
          "cachedResultName": "SEO Content Strategy Get or Generate"
        },
        "workflowInputs": {
          "mappingMode": "defineBelow",
          "value": {
            "config": "={{ $json.config }}"
          },
          "matchingColumns": [
            "config"
          ],
          "schema": [
            {
              "id": "config",
              "displayName": "config",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "canBeUsedToMatch": true,
              "type": "object",
              "removed": false
            }
          ],
          "attemptToConvertTypes": false,
          "convertFieldsToString": true
        },
        "options": {}
      },
      "type": "n8n-nodes-base.executeWorkflow",
      "typeVersion": 1.2,
      "position": [
        -820,
        1940
      ],
      "id": "31ec316a-777b-4099-acd9-3b13028c23e2",
      "name": "Get or Generate SEO Strategy Document"
    },
    {
      "parameters": {
        "name": "create_blog_post",
        "description": "Call this tool to create a new blog post. This tool will conduct SEO research, create a keyword strategy, generate a new SEO optimised blog post and upload it to the user's wordpress site together with a newly generated image.",
        "workflowId": {
          "__rl": true,
          "value": "Q4DvK9uZrWi0Sqir",
          "mode": "list",
          "cachedResultName": "Generate Wordpress Post"
        },
        "workflowInputs": {
          "mappingMode": "defineBelow",
          "value": {
            "wordpressClientId": "={{ $('Config').item.json.wordpressClientId }}",
            "title": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('title', `The title of the idea for the blog post`, 'string') }}",
            "description": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('description', `The description of the idea for the blog post`, 'string') }}"
          },
          "matchingColumns": [
            "route"
          ],
          "schema": [
            {
              "id": "wordpressClientId",
              "displayName": "wordpressClientId",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "canBeUsedToMatch": true,
              "type": "string",
              "removed": false
            },
            {
              "id": "title",
              "displayName": "title",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "canBeUsedToMatch": true,
              "type": "string",
              "removed": false
            },
            {
              "id": "description",
              "displayName": "description",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "canBeUsedToMatch": true,
              "type": "string",
              "removed": false
            }
          ],
          "attemptToConvertTypes": false,
          "convertFieldsToString": false
        }
      },
      "type": "@n8n/n8n-nodes-langchain.toolWorkflow",
      "typeVersion": 2.1,
      "position": [
        420,
        620
      ],
      "id": "425bea77-12ad-4843-b165-f8610e694088",
      "name": "Create Blog Post Tool"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "f688a7ed-2f08-48d9-85f1-dcc89b2b30c1",
              "leftValue": "={{ $json.error }}",
              "rightValue": "ALREADY_GENERATING",
              "operator": {
                "type": "string",
                "operation": "equals",
                "name": "filter.operator.equals"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        -580,
        1940
      ],
      "id": "684f3588-8e4f-478a-903a-565335a11caf",
      "name": "If already generating"
    },
    {
      "parameters": {
        "chatId": "={{ $json.telegramChatId }}",
        "text": "=Hello! I'm your SEO-focused copywriter assistant. I specialize in creating engaging blog content tailored to your business. I can help you:\n\n• Generate blog post ideas\n• Create SEO-optimized content\n• Answer questions about your website content\n\nWould you like to start by brainstorming some blog post ideas for your business?",
        "additionalFields": {
          "appendAttribution": false
        }
      },
      "type": "n8n-nodes-base.telegram",
      "typeVersion": 1.2,
      "position": [
        -400,
        660
      ],
      "id": "05a2872b-460f-459a-affa-cd423454de78",
      "name": "Send Welcome Message",
      "webhookId": "40d23887-38a6-4899-93e5-cf5a25541ea0",
      "credentials": {
        "telegramApi": {
          "id": "EHNvbxKETcV3t5MW",
          "name": "Telegram account"
        }
      }
    },
    {
      "parameters": {
        "options": {
          "prompt": "Instructions:\n--------------\n{instructions}\n--------------\nCompletion:\n--------------\n{completion}\n--------------\n\nAbove, the Completion did not satisfy the constraints given in the Instructions.\nError:\n--------------\n{error}\n--------------\n\nPlease try again. Please only respond with an answer that satisfies the constraints laid out in the Instructions:"
        }
      },
      "type": "@n8n/n8n-nodes-langchain.outputParserAutofixing",
      "typeVersion": 1,
      "position": [
        1340,
        1900
      ],
      "id": "282eab3d-ec89-4cd9-8f32-0e37d147cd53",
      "name": "Auto-fixing Output Parser"
    },
    {
      "parameters": {
        "model": {
          "__rl": true,
          "mode": "list",
          "value": "gpt-4o-mini"
        },
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
      "typeVersion": 1.2,
      "position": [
        1260,
        2100
      ],
      "id": "4005a297-1d4e-48a3-8b10-30ffe461f646",
      "name": "OpenAI Chat Model3",
      "credentials": {
        "openAiApi": {
          "id": "I92UkH9mThS7D4I6",
          "name": "CodPal Account"
        }
      }
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "={{ $json.output }}",
        "hasOutputParser": true,
        "messages": {
          "messageValues": [
            {
              "message": "Ensure the user's message confirms to the following JSON:\n{\n\"title\": \"string\",\n\"description\": \"string\n}\nIf it does, repeat the same message, if not, structure it correctly.\nOutput only the JSON, no other commentary."
            }
          ]
        }
      },
      "type": "@n8n/n8n-nodes-langchain.chainLlm",
      "typeVersion": 1.5,
      "position": [
        1180,
        1680
      ],
      "id": "e4b483ad-7fb0-49e8-a113-1e1e718c23c5",
      "name": "Basic LLM Chain"
    },
    {
      "parameters": {
        "model": {
          "__rl": true,
          "value": "gpt-4o",
          "mode": "list",
          "cachedResultName": "gpt-4o"
        },
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
      "typeVersion": 1.2,
      "position": [
        720,
        1900
      ],
      "id": "57a0cdb2-1860-4d36-aa56-53307c7125e7",
      "name": "OpenAI Chat Model4",
      "credentials": {
        "openAiApi": {
          "id": "I92UkH9mThS7D4I6",
          "name": "CodPal Account"
        }
      }
    },
    {
      "parameters": {
        "sessionIdType": "customKey",
        "sessionKey": "=post-idea-{{ $('Params').item.json.id }}"
      },
      "type": "@n8n/n8n-nodes-langchain.memoryBufferWindow",
      "typeVersion": 1.3,
      "position": [
        900,
        1900
      ],
      "id": "a6824e21-15ab-4079-ad14-4af2d72da4b0",
      "name": "Simple Memory2"
    }
  ],
  "pinData": {
    "SubWorkflow": [
      {
        "json": {
          "route": "idea_agent",
          "query": "Generate an idea",
          "seoContentStrategy": "CTO as a servcie",
          "config": {
            "id": "rece2Siq6iLfUTt9s",
            "Name": "Apostolos",
            "urlEncoded": "aHR0cHM6Ly9jb2RwYWwuY29t",
            "telegramChatId": "893910766",
            "message": "/start",
            "wordpressUsername": "apostolis.stephanou@gmail.com",
            "wordpressPassword": "K^lRRPq*6C9tU!x^sLDsP$Nd",
            "wordpressUrl": "https://codpal.com",
            "wordpressClientId": "recffZZw0CIteTg2l",
            "wordpressClientIdentifier": 1
          }
        }
      }
    ]
  },
  "repo_name": "n8n-backup",
  "repo_owner": "apostolisCodpal",
  "repo_path": "https://github.com/apostolisCodpal/n8n-backup/",
  "settings": {
    "executionOrder": "v1"
  },
  "staticData": null,
  "tags": [],
  "triggerCount": 1,
  "updatedAt": "2025-03-28T09:02:42.000Z",
  "versionId": "e3407d9a-2341-4c15-b0a5-2bd7a221c5f3"
}